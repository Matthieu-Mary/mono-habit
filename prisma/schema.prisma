// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// enums
enum Status {
  UNSCHEDULED
  PENDING
  COMPLETED
  MISSED
}

// User model
model User {
  id            String       @id @default(cuid())
  email         String       @unique
  username      String
  password      String // assurez-vous que ce champ existe
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  habits        Habit[]
  habitLogs     HabitLog[]
}

// Sert à enregistrer les habitudes (ex: manger une pomme, lire un livre, etc.)
model Habit {
  id          String       @id @default(cuid())
  name        String
  description String?
  startDate   DateTime @default(now())
  userId      String
  user        User         @relation(fields: [userId], references: [id])
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  HabitLog    HabitLog[]
}

// Sert à enregistrer les logs des habitudes (ex: si on a mangé une pomme aujourd'hui, on enregistre le log)
model HabitLog {
  id          String    @id @default(cuid())
  date        DateTime
  completed   Boolean   @default(false)
  status      Status
  completedAt DateTime?
  notes       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  habitId String
  habit   Habit  @relation(fields: [habitId], references: [id], onDelete: Cascade)
  userId  String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([habitId, date])
  @@index([habitId])
  @@index([userId])
}


// Auth.js Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

// Sert à enregistrer les sessions (ex: si on se connecte, on enregistre la session)
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

// Sert à enregistrer les tokens de vérification (ex: si on a oublié notre mot de passe, on enregistre le token)
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

